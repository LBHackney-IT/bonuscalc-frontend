version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  node-executor:
    docker:
      - image: circleci/node:14.17.6-browsers
  docker-python:
    docker:
      - image: circleci/python:3.7

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  install-dependencies:
    executor: node-executor
    steps:
      - *attach_workspace
      - checkout
      - restore_cache:
          key: dependency-cache-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn
      - save_cache:
          key: dependency-cache-v1-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ./.next/cache
            - /home/circleci/.cache/Cypress
      - persist_to_workspace:
          root: *workspace_root
          paths: .

  tests:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Configure NPM
          command: npm config set scripts-prepend-node-path true
      - run:
          name: Run Linter
          command: yarn lint
      - run:
          name: Run Tests
          command: yarn test:unit

  e2e:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Configure NPM
          command: npm config set scripts-prepend-node-path true
      - run:
          name: Run E2E With Lighthouse Audit
          command: yarn e2e:audit
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/reports

  build-deploy-development:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: Swap node versions
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v14
            nvm use 14
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: deploy
          command: |
            export NODE_ENV=production
            export NEXT_PUBLIC_NODE_ENV=production
            export NEXT_PUBLIC_ENV_NAME=development
            export NEXT_PUBLIC_REPAIRS_HUB_URL=https://repairs-hub-staging.hackney.gov.uk/work-orders
            export NEXT_PUBLIC_FIRST_WEEK=2021-08-02
            export NEXT_PUBLIC_OVERTIME_HOURS_TYPE_ID=400
            export NEXT_PUBLIC_OVERTIME_JOB_TYPE_ID=401
            export NEXT_PUBLIC_OVERTIME_RATE=23.75
            export NEXT_PUBLIC_OOH_ROTA_TYPE_ID=500
            export NEXT_PUBLIC_OOH_JOB_TYPE_ID=501
            export NEXT_PUBLIC_OOH_RATE=27.51
            export NEXT_PUBLIC_SENTRY_ENVIRONMENT=development
            export NEXT_PUBLIC_SENTRY_RELEASE=$CIRCLE_SHA1
            export NEXT_PUBLIC_SENTRY_DEBUG=false
            yarn build && yarn --production=true && npm i --prefix=$HOME/.local -g serverless@"<3.0.0" && sls deploy -s development

  build-deploy-staging:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: Swap node versions
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v14
            nvm use 14
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: deploy
          command: |
            export NODE_ENV=production
            export NEXT_PUBLIC_NODE_ENV=production
            export NEXT_PUBLIC_ENV_NAME=staging
            export NEXT_PUBLIC_REPAIRS_HUB_URL=https://repairs-hub-staging.hackney.gov.uk/work-orders
            export NEXT_PUBLIC_FIRST_WEEK=2021-08-02
            export NEXT_PUBLIC_OVERTIME_HOURS_TYPE_ID=400
            export NEXT_PUBLIC_OVERTIME_JOB_TYPE_ID=401
            export NEXT_PUBLIC_OVERTIME_RATE=23.75
            export NEXT_PUBLIC_OOH_ROTA_TYPE_ID=500
            export NEXT_PUBLIC_OOH_JOB_TYPE_ID=501
            export NEXT_PUBLIC_OOH_RATE=27.51
            export NEXT_PUBLIC_SENTRY_ENVIRONMENT=staging
            export NEXT_PUBLIC_SENTRY_RELEASE=$CIRCLE_SHA1
            export NEXT_PUBLIC_SENTRY_DEBUG=false
            yarn build && yarn --production=true && npm i --prefix=$HOME/.local -g serverless@"<3.0.0" && sls deploy -s staging

  build-deploy-production:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: Swap node versions
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v14
            nvm use 14
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: deploy
          command: |
            export NODE_ENV=production
            export NEXT_PUBLIC_NODE_ENV=production
            export NEXT_PUBLIC_ENV_NAME=production
            export NEXT_PUBLIC_REPAIRS_HUB_URL=https://repairs-hub.hackney.gov.uk/work-orders
            export NEXT_PUBLIC_FIRST_WEEK=2021-11-01
            export NEXT_PUBLIC_OVERTIME_HOURS_TYPE_ID=400
            export NEXT_PUBLIC_OVERTIME_JOB_TYPE_ID=401
            export NEXT_PUBLIC_OVERTIME_RATE=23.75
            export NEXT_PUBLIC_OOH_ROTA_TYPE_ID=500
            export NEXT_PUBLIC_OOH_JOB_TYPE_ID=501
            export NEXT_PUBLIC_OOH_RATE=27.51
            export NEXT_PUBLIC_SENTRY_ENVIRONMENT=production
            export NEXT_PUBLIC_SENTRY_RELEASE=$CIRCLE_SHA1
            export NEXT_PUBLIC_SENTRY_DEBUG=false
            yarn build && yarn --production=true && npm i --prefix=$HOME/.local -g serverless@"<3.0.0" && sls deploy -s production

  assume-role-development:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_DEVELOPMENT
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  assume-role-staging:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_STAGING
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  assume-role-production:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_PRODUCTION
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - install-dependencies
      - tests:
          requires:
            - install-dependencies
      - e2e:
          requires:
            - install-dependencies
      - assume-role-development:
          context: api-assume-role-housing-development-context
          requires:
            - tests
            - e2e
          filters:
            branches:
              only: develop
      - build-deploy-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: develop
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          requires:
            - tests
            - e2e
          filters:
            branches:
              only: main
      - build-deploy-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: main
      - permit-deploy-production:
          type: approval
          requires:
            - build-deploy-staging
          filters:
            branches:
              only: main
      - assume-role-production:
          context: api-assume-role-housing-production-context
          requires:
            - permit-deploy-production
          filters:
            branches:
              only: main
      - build-deploy-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: main
